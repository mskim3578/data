# -*- coding: utf-8 -*-
"""
Created on Tue Sep  2 11:14:47 2025

@author: letuin
"""

# 데이터 증식 방법  (data Augmentation) 
# 비슷한 이미지를 생성.
from tensorflow.keras.preprocessing.image \
    import  ImageDataGenerator, load_img, img_to_array

import cv2  
import numpy as np
# pip install opencv-python  
    

#ImageDataGenerator : 이미지 데이터 변형 해주는 객체
train_datagen = ImageDataGenerator(\
           horizontal_flip = True, #수평방향 뒤집기
           vertical_flip = True,   #수직방향 뒤집기
           shear_range=0.5,        #시계방향으로 이미지 밀기
           brightness_range=[0.5,1.0], #이미지 밝기 변경
           zoom_range=0.2,    #이미지 크기 확대. 확대/축소
           width_shift_range=0.1, #가로방향으로 이미지 이동
           height_shift_range=0.1,#세로방향으로 이미지 이동
           rotation_range=30,  #이미지 회줜
           fill_mode='nearest' #이미지변환시 픽셀 채우는 방법
           )
 
    
wafer_datagen = ImageDataGenerator(\
           horizontal_flip = True, #수평방향 뒤집기
           vertical_flip = True,   #수직방향 뒤집기           
           zoom_range=0.01,    #이미지 크기 확대. 확대/축소
           rotation_range=360*0.01,  #이미지 회전     
           )
    
    
    
train_generator = train_datagen.flow_from_directory(
    'data3',             # 훈련 데이터가 있는 디렉토리
    target_size=(599, 598),   # 이미지 크기를 150x150으로 통일
    batch_size=32,            # 배치 크기
    class_mode='binary'       
    # 2진 분류(binary classification)일 경우 'binary'로 설정
)


img1 = load_img('data3/origin.jpg')
# 이미지를 NumPy 배열로 변환
x = img_to_array(img1)  # (높이, 너비, 채널) 형태로 변환

# 배치 차원(dimension)을 추가. 'flow()' 메서드는 4D 텐서(배치 크기, 높이, 너비, 채널)를 기대합니다.
x = x.reshape(1, 552,583,3)


import os
output_dir = "aug_data"
if not os.path.exists(output_dir):
    os.makedirs(output_dir)
    
i = 0
for batch in train_datagen.flow(x, batch_size=1, 
        save_to_dir=output_dir, 
        save_prefix='new_origin', 
        save_format='jpeg'):
    i += 1
    if i > 10:  # 10개의 변형된 이미지 생성 후 루프 중단
        break

print(f"10개의 변형된 이미지가 '{output_dir}' 폴더에 저장되었습니다.")

#  wafer_datagen
i = 0
for batch in wafer_datagen.flow(x, batch_size=1, 
        save_to_dir=output_dir, 
        save_prefix='waf_origin', 
        save_format='jpeg'):
    i += 1
    if i > 10:  # 10개의 변형된 이미지 생성 후 루프 중단
        break

print(f"10개의 변형된 이미지가 '{output_dir}' 폴더에 저장되었습니다.")



'''
function name
1. square_image : 이미지의 size를 고정한다 : 
           max width나 height를 가진 정사작형의 이미지로 만든다
2. edge_image :  이미지의 edge를 뜬다 : 
3. resize_image : resize를 한다 :   


'''

def square_image(greyimg, max_dim):
    width=greyimg.shape[0]
    height=greyimg.shape[1]
    # 더 긴 변의 길이를 기준으로 정사각형 크기 결정
    squared_img = np.zeros(max_dim, dtype=greyimg.dtype)
    # 이미지 중앙에 원본 이미지 복사
    bottom = (max_dim[0]-width)
    right = (max_dim[1]-height) 
    # 추가 내용은 width는 ---> left
    #  height 는 ----> bottom 으로 한다
    
    squared_img = cv2.copyMakeBorder(greyimg, 0, bottom, 0, right, 
                     cv2.BORDER_CONSTANT, value=(0, 0, 0)) 
    # 검정색 테두리 추가
   
    return squared_img
