import  ImageDataGenerator, load_img, img_to_array

import cv2  
import numpy as np
# pip install opencv-python  



def square_image(greyimg, max_dim):
    width=greyimg.shape[0]
    height=greyimg.shape[1]
    # 더 긴 변의 길이를 기준으로 정사각형 크기 결정
    squared_img = np.zeros(max_dim, dtype=greyimg.dtype)
    # 이미지 탑에 원본 이미지 복사
    # 이미지 중앙에 원본 이미지 복사 하세요
    bottom = (max_dim[0]-width)
    right = (max_dim[1]-height) 
    # 추가 내용은 width는 ---> left
    #  height 는 ----> bottom 으로 한다
    
    squared_img = cv2.copyMakeBorder(greyimg, 0, bottom, 0, right, 
                     cv2.BORDER_CONSTANT, value=(0, 0, 0)) 
    # 검정색 테두리 추가
   
    return squared_img

img = cv2.imread("data3/origin.jpg")  
img.shape  #(552, 583, 3)
greyimg=cv2.cvtColor(img, cv2.COLOR_BGR2GRAY)
greyimg.shape   # (552, 583)

square_img=square_image(greyimg, (600,600))
cv2.imwrite("aug_data/square_img.jpg", square_img)



def edge_image(grayimg):    
    low_threshold = 20
    high_threshold = 140
    edge = cv2.Canny(grayimg, low_threshold, high_threshold)
    return edge

edge_img=edge_image(greyimg)
cv2.imwrite("aug_data/edge_img.jpg", edge_img)


def resize_image(grayimg, resize_dim):
    grayimg=cv2.resize(grayimg, resize_dim, 
                       fx=0, fy=0, interpolation=cv2.INTER_AREA)
    
    # fx:가로, fy:세로, cv2.INTER_AREA: 이미지 축소에 가장 적합
    
    return grayimg

resize_img=resize_image(greyimg, (100,100))
cv2.imwrite("aug_data/resize_img.jpg", resize_img)


 
    
wafer_datagen = ImageDataGenerator(\
           horizontal_flip = True, #수평방향 뒤집기
           vertical_flip = True,   #수직방향 뒤집기           
           zoom_range=0.01,    #이미지 크기 확대. 확대/축소
           rotation_range=360*0.01,  #이미지 회전     
           )
