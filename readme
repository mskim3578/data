b=np.ones((2,3),dtype=int)
b
a.dtype
b.dtype
c = a+b #실수형 = 실수형+정수형
c = b+a #실수형 = 실수형+정수형
c

a+=b  #실수형=실수형+정수형
a
a.dtype

b+=a  #오류. 정수형 = 정수형+실수형










#2차원 배열의 연산
a=np.array([[1,1],[0,1]])
b=np.array([[2,0],[3,4]])
a
b
c = a + b #각각의 요소를 연산
c
c = a - b #각각의 요소를 연산
c
c = a * b #각각의 요소를 연산
c



'''
  데이터 전처리 : 원본데이터를 원하는 형태로 변경 과정. 
    1. 결측값 처리 : 값이 없는 경우.
        - isnull() : 결측값인 경우 True, 일반값인 경우 False
        - notnull() : 결측값인 경우 False, 일반값인 경우 True
        - dropna() : 결측값 제거 함수
              dropna(axis=1,thresh=500) : 결측값아닌 커럼이 이 500개 미만인  컬럼 제거
              dropna(subset=[컬럼명],how=any/all, axis=0) :결측값을 가지고 있는 행 제거
                                              any:한개라도 결측값.
                                              all:모두 결측값
        - fillna() :결측값 치환
           fillna(치환값,inplace=True)
           fillna(방법,inplace=True) : method="ffill"/"bfill" :앞의값/뒤의값
           
    2. 중복데이터 처리 
       - duplicated() : 중복데이터 찾기. 첫번째 데이터는 False, 
                        같은 데이터인 경우 두번째 True       
       - drop_duplicates() : 중복데이터를 제거. 중복된 데이터 중 한개는 남김.

    3. 새로운 컬럼 생성
       - df[컬럼명] : 컬럼명이 없는 경우 생성, 있으면 수정.
       - round(자리수) : 반올림.    

    4. 오류데이터 존재.
       - 결측값 치환 : 결측값(np.nan) 
                 replace(오류문자열, np.nan, inplace=True)
'''  

'''
  범주형 데이터 : 값의 범위를 가진 데이터. 
                describe() 함수에서 조회시 제외.
  날짜 데이터 : pandas.date_range() : 날짜값을 범위 지정해서 조회
               df["Date"] : datetime 형
               df["Date"].dt.year : 년도
               df["Date"].dt.month : 월
               df["Date"].dt.day : 일
               
  형변환 : astype("자료형")   : str,int,float,category....    
  
  str : DataFrame의 요소들을 문자열처럼 사용. 문자열 함수 사용가능
              df["aaa"].str.startsWidth("")...     
              
  === 그룹화 : DataFrame을 컬럼의 값으로 데이터 분리
  groupby(컬럼명) : DataFrame 객체를 컬럼명의 값으로 분리.
  
  
'''















#날짜 데이터.
#20220101 부터  이후 6까지일 날짜를 데이터 
#date_range : 날짜의 범위를 지정
# 단위 설정 
#  freq="D" : 일자기준. 기본값
#  freq="M" : 월의 종료일 기준
#  freq="MS" : 월의 시작일 기준
#  freq="3M" : 3개월의 종료일 기준





df = pd.DataFrame({"c1":['a','a','b','a','b'],
                   "c2":[1,1,1,2,2],
                   "c3":[1,1,2,2,2]})



#1. seaborn 데이터에서 mpg 데이터 로드하기
'''
mpg : 연비
cylinders : 실린더 수
displacement : 배기량
horsepower : 출력
weight : 차량무게
acceleration : 가속능력
model_year : 출시년도
origin : 제조국
name : 모델명
'''




##################################################
# titanic 데이터셋 연습(데이터 전처리)
# seaborn 모듈에 저장된 데이터
'''
survived	생존여부
pclass	좌석등급 (숫자)
sex	성별 (male, female)
age	나이
sibsp	형제자매 + 배우자 인원수
parch: 	부모 + 자식 인원수
fare: 	요금
embarked	탑승 항구
class	좌석등급 (영문)
who	성별 (man, woman)
adult_male 성인남자여부 
deck	선실 고유 번호 가장 앞자리 알파벳
embark_town	탑승 항구 (영문)
alive	생존여부 (영문)
alone	혼자인지 여부
'''

pandas 모듈
 - 표형태(행:index,열:columns)의 데이터를 처리하기 위한 모듈
 - Series : 1차원형태의 데이터처리. DataFrame의 한개의 컬럼값들의 자료형
 - DataFrame : 표형태의 데이터처리. Series데이터의 모임.
     - 기술통계함수 : sum,mean,median,max,min,std,var,describe
     - 행의 값 : index
     - 열의 값 : columns
     - rename : index,columns의 값을 변경 함수 inplace=True : 객체자체변경
     - drop   : index,columns의 값을 제거 함수 inplace=True : 객체자체변경
     - 얕은복사 : df2 = df, df,df2객체는 물리적으로 같은 객체 
     - 깊은복사 : df3=df[:], df4=df.copy()
     
     - 한개의 컬럼조회 : df["컬럼명"], df.컬럼명 => Series 객체
     - 여러개의 컬럼조회 : df[["컬럼1","컬럼2"]] => DataFrame 객체
                          df["인덱스1":"인넥스n"] =>  DataFrame 객체.  범위지정은 인덱스만 가능함!!!!
     - 행을 조회 : loc["인덱스명"], iloc[인덱스순서]     
     - 컬럼 => 인덱스 : set_index
     - 인덱스 => 컬럼 : reset_index
     - csv 파일 읽기 : read_csv                     
     - csv 파일 쓰기 : to_csv                     
     - excel 파일 읽기 : read_excel
     - excel 파일 쓰기 : ExcelWriter > to_excel > save
     - reindex([], fill_value=0) 함수 : 인덱스 재설정. 행의 추가.
     - sort_index(ascending=False)  : 인덱스명으로 정렬
     - sort_values() : 기준컬럼의 값으로 정렬
    
     
     
'''








exam_data={'수학':[90,80,70],'영어':[98,88,95],
 '음악':[85,95,100],'체육':[100,90,90]}



exam_data={"이름":["서준","우현","인아"],
"수학":[90,80,70],
"영어":[98,89,95],
"음악":[85,95,100],
"체육":[100,90,90]}
