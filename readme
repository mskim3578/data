# -*- coding: utf-8 -*-
"""
Created on Tue Jul  1 10:24:45 2025

@author: letuin
"""

## numpy :행렬, 통계관련기본함수,배열 기능 제공하는 모듈
import numpy as np
np.random.rand()


#배열 생성
#np.arange(15) : 0 ~ 14까지의 숫자를 1차원 배열로 생성
#reshape(3,5) : 3행5열의 2차원배열로 생성.
#               배열 갯수가 맞아야 함.
x= np.arange(15)
a = x.reshape(3,5)
a  #0~14까지의 숫자를 3행 5열의 2차원배열로 생성
type(a)

#배열 요소의 자료형
a.dtype  #int32 => 32비트, 4바이트
#배열 형태
a.shape #(3,5) : 3행 5열 2차원 배열

np.arange(15).shape #(15,) 1차원배열
np.arange(15).reshape(15,1).shape #(15, 1) 2차원배열

#배열의 차수
a.ndim  #2차원
x.ndim 
np.arange(15).ndim #1

#배열의 요소의 바이트 크기
a.itemsize  #4 byte

#배열의 요소의 갯수
a.size 
np.arange(15).size


#리스트로 배열 생성하기
b=np.array([6,7,8])
b
type(b)
#튜플로 배열 생성하기
c=np.array(6,7,8)  #오류
c=np.array((6,7,8))  
c
type(c)

#리스트로 2차원 배열 생성하기
d=np.array([[6,7,8],[1,2,3]])
d
type(d)
#0으로 초기화된 3행 4열 배열 e 생성하기
e=np.array([[0,0,0,0],[0,0,0,0],[0,0,0,0]])
e
e.shape

#zero값  setting
e=np.zeros((3,4))
e
e.shape

# 모든 요소의 값이 0인 배열 100개를 1차원으로 생성하기
f = np.zeros(100)
f.shape


#1 값  setting
# 모든 요소의 값이 1인 배열 100개를 1차원으로 생성하기
g = np.ones(100)
g.shape
#1으로 초기화된 10행 10열 배열 h생성하기
h =np.ones((10,10))
h
h.shape

np.eye(10,10) #단위 행렬
#0~9999까지의 값을 가진 배열을 100행 100열 배열 i생성하기
i = np.arange(10000).reshape(100,100)
i.shape
i


#0~2까지의 숫자를 9개로 균등분할하여 배열 생성
j=np.linspace(0,2,9)
j
j.size
#0~9까지의 숫자를 20개로 균등분할한 배열 생성
k=np.linspace(0,9,20)
k
k.size
#정수형 1의 값으로 10개를 가진 배열 l
l = np.ones(10,dtype=int)
l
l.dtype

#상수값 
np.pi


# numpy 데이터 연산
#1차원 배열의 연산
a = np.array([20,30,40,50])
b = np.arange(4) #(0,1,2,3)
c = a-b  #각각의 요소들을 연산
c # array([20, 29, 38, 47])

c = a+b  #각각의 요소들을 연산
c # array([20, 31, 42, 53])

c = a*b  #각각의 요소들을 연산
c # array([ 0,  30,  80, 150])


c = b**2 #b 요소들 각각의 제곱
c

c = a < 35 # a배열의 요소을 35와 비교하여 작으면 True,크면 False
c

#2차원 배열의 연산
a=np.array([[1,1],[0,1]])
b=np.array([[2,0],[3,4]])
a
b
c = a + b #각각의 요소를 연산
c
c = a - b #각각의 요소를 연산
c
c = a * b #각각의 요소를 연산
c

# @: 행렬의 곱. dot
c = a @ b
c
'''
  a    @   b  =    c 
행 [1,1] [2,0]   [1*2+1*3][1*0+1*4]  [5,4]
   [0,1] [3,4]   [0*2+1*3][0*3+1*4]  [3,4]
'''
c = a.dot(b)
c



b=np.ones((2,3),dtype=int)
b
a.dtype
b.dtype
c = a+b #실수형 = 실수형+정수형
c = b+a #실수형 = 실수형+정수형
c

a+=b  #실수형=실수형+정수형
a
a.dtype

b+=a  #오류. 정수형 = 정수형+실수형

#a배열의 전체 요소들의 합
a.sum()
#a배열의 전체 요소들 중 최소값
a.min()
#a배열의 전체 요소들 중 최대값
a.max()
#a배열의 전체 요소들 중 평균값
a.mean()
#a배열의 전체 요소들 중 중간값

#a.median()  error

#a배열의 전체 요소들 중 표준편차값
a.std()
a

a=np.array([[1,2],[3,4]])
a
#a배열의 행 중 최대값
a.max(axis=1)
#a배열의 열 중 최대값
a.max(axis=0)
#a배열의 행 중 최소값
a.min(axis=1)
#a배열의 열 중 최소값
a.min(axis=0)
#a배열의 행 별 합계값
a.sum(axis=1)

#a배열의 행 별 누적합계값
a.cumsum(axis=1) 

#a배열의 열 별 합계값
a.sum(axis=0)
#a배열의 열 별 누적합계값
a.cumsum(axis=0) 

#10부터 49까지의 c배열을 생성하기
c=np.arange(10,50)
c
#첫번째 값 출력하기
c[0]
#첫번째~4번째까지 값 출력하기
c[:4] #0번인덱스부터 ~ 3번인덱스까지
c[0:4] #0번인덱스부터 ~ 3번인덱스까지
#4번인덱스값을 100으로 변경
c[4]=100
c[:5]
#처음부터 3씩 증가하여 10인덱스까지 조회
c[:11:3]
c[:11]

#0부터11까지의 숫자를 3행4열 2차원 배열 d로 생성하기
d=np.arange(12).reshape(3,4)
d
#1행1열의 값을 조회하기
d[1,1]
d[0:2,0:2] #1행까지, 1열까지 조회
d[:2,:2] #1행까지, 1열까지 조회
d[::2,::2] #2씩증가. 


#1값으로 채워진 10행 10열 배열 e 생성하기
e=np.ones((10,10))
e
#e배열의 가장 자리는 1로 내부는 0으로 채워진 배열로수정하기
e[1:9,1:9]=0
e
e=np.ones((10,10))
e[1:-1,1:-1]=0
e
#######################  numpy.py

'''
  데이터 전처리 : 원본데이터를 원하는 형태로 변경 과정. 
    1. 결측값 처리 : 값이 없는 경우.
        - isnull() : 결측값인 경우 True, 일반값인 경우 False
        - notnull() : 결측값인 경우 False, 일반값인 경우 True
        - dropna() : 결측값 제거 함수
              dropna(axis=1,thresh=500) : 결측값아닌 커럼이 이 500개 미만인  컬럼 제거
              dropna(subset=[컬럼명],how=any/all, axis=0) :결측값을 가지고 있는 행 제거
                                              any:한개라도 결측값.
                                              all:모두 결측값
        - fillna() :결측값 치환
           fillna(치환값,inplace=True)
           fillna(방법,inplace=True) : method="ffill"/"bfill" :앞의값/뒤의값
           
    2. 중복데이터 처리 
       - duplicated() : 중복데이터 찾기. 첫번째 데이터는 False, 
                        같은 데이터인 경우 두번째 True       
       - drop_duplicates() : 중복데이터를 제거. 중복된 데이터 중 한개는 남김.

    3. 새로운 컬럼 생성
       - df[컬럼명] : 컬럼명이 없는 경우 생성, 있으면 수정.
       - round(자리수) : 반올림.    

    4. 오류데이터 존재.
       - 결측값 치환 : 결측값(np.nan) 
                 replace(오류문자열, np.nan, inplace=True)
'''  

'''
  범주형 데이터 : 값의 범위를 가진 데이터. 
                describe() 함수에서 조회시 제외.
  날짜 데이터 : pandas.date_range() : 날짜값을 범위 지정해서 조회
               df["Date"] : datetime 형
               df["Date"].dt.year : 년도
               df["Date"].dt.month : 월
               df["Date"].dt.day : 일
               
  형변환 : astype("자료형")   : str,int,float,category....    
  
  str : DataFrame의 요소들을 문자열처럼 사용. 문자열 함수 사용가능
              df["aaa"].str.startsWidth("")...     
              
  === 그룹화 : DataFrame을 컬럼의 값으로 데이터 분리
  groupby(컬럼명) : DataFrame 객체를 컬럼명의 값으로 분리.
  
  
'''















#날짜 데이터.
#20220101 부터  이후 6까지일 날짜를 데이터 
#date_range : 날짜의 범위를 지정
# 단위 설정 
#  freq="D" : 일자기준. 기본값
#  freq="M" : 월의 종료일 기준
#  freq="MS" : 월의 시작일 기준
#  freq="3M" : 3개월의 종료일 기준





df = pd.DataFrame({"c1":['a','a','b','a','b'],
                   "c2":[1,1,1,2,2],
                   "c3":[1,1,2,2,2]})



#1. seaborn 데이터에서 mpg 데이터 로드하기
'''
mpg : 연비
cylinders : 실린더 수
displacement : 배기량
horsepower : 출력
weight : 차량무게
acceleration : 가속능력
model_year : 출시년도
origin : 제조국
name : 모델명
'''




##################################################
# titanic 데이터셋 연습(데이터 전처리)
# seaborn 모듈에 저장된 데이터
'''
survived	생존여부
pclass	좌석등급 (숫자)
sex	성별 (male, female)
age	나이
sibsp	형제자매 + 배우자 인원수
parch: 	부모 + 자식 인원수
fare: 	요금
embarked	탑승 항구
class	좌석등급 (영문)
who	성별 (man, woman)
adult_male 성인남자여부 
deck	선실 고유 번호 가장 앞자리 알파벳
embark_town	탑승 항구 (영문)
alive	생존여부 (영문)
alone	혼자인지 여부
'''

pandas 모듈
 - 표형태(행:index,열:columns)의 데이터를 처리하기 위한 모듈
 - Series : 1차원형태의 데이터처리. DataFrame의 한개의 컬럼값들의 자료형
 - DataFrame : 표형태의 데이터처리. Series데이터의 모임.
     - 기술통계함수 : sum,mean,median,max,min,std,var,describe
     - 행의 값 : index
     - 열의 값 : columns
     - rename : index,columns의 값을 변경 함수 inplace=True : 객체자체변경
     - drop   : index,columns의 값을 제거 함수 inplace=True : 객체자체변경
     - 얕은복사 : df2 = df, df,df2객체는 물리적으로 같은 객체 
     - 깊은복사 : df3=df[:], df4=df.copy()
     
     - 한개의 컬럼조회 : df["컬럼명"], df.컬럼명 => Series 객체
     - 여러개의 컬럼조회 : df[["컬럼1","컬럼2"]] => DataFrame 객체
                          df["인덱스1":"인넥스n"] =>  DataFrame 객체.  범위지정은 인덱스만 가능함!!!!
     - 행을 조회 : loc["인덱스명"], iloc[인덱스순서]     
     - 컬럼 => 인덱스 : set_index
     - 인덱스 => 컬럼 : reset_index
     - csv 파일 읽기 : read_csv                     
     - csv 파일 쓰기 : to_csv                     
     - excel 파일 읽기 : read_excel
     - excel 파일 쓰기 : ExcelWriter > to_excel > save
     - reindex([], fill_value=0) 함수 : 인덱스 재설정. 행의 추가.
     - sort_index(ascending=False)  : 인덱스명으로 정렬
     - sort_values() : 기준컬럼의 값으로 정렬
    
     
     
'''








exam_data={'수학':[90,80,70],'영어':[98,88,95],
 '음악':[85,95,100],'체육':[100,90,90]}



exam_data={"이름":["서준","우현","인아"],
"수학":[90,80,70],
"영어":[98,89,95],
"음악":[85,95,100],
"체육":[100,90,90]}
